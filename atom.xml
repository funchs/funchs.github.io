<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风起时</title>
  
  <subtitle>大风起兮云飞扬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://funchs.com/"/>
  <updated>2018-04-11T02:45:10.500Z</updated>
  <id>http://funchs.com/</id>
  
  <author>
    <name>风起时Funchs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu 16.04安装Java JDK</title>
    <link href="http://funchs.com/2018/04/10/Ubuntu%2016.04%E5%AE%89%E8%A3%85Java%20JDK%E7%9B%B8%E5%85%B3/"/>
    <id>http://funchs.com/2018/04/10/Ubuntu 16.04安装Java JDK相关/</id>
    <published>2018-04-10T04:00:00.000Z</published>
    <updated>2018-04-11T02:45:10.500Z</updated>
    
    <content type="html"><![CDATA[<p>Java JDK有两个版本，一个开源版本Openjdk，还有一个oracle官方版本jdk。下面记录在Ubuntu 16.04上安装Java JDK的步骤。</p><h3 id="安装openjdk"><a href="#安装openjdk" class="headerlink" title="安装openjdk"></a>安装openjdk</h3><p>更新软件包列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure><p>安装openjdk-8-jdk：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install openjdk-8-jdk</span></span><br></pre></td></tr></table></figure><p>查看java版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure><p><img src="/images/Screen_Shot_1.png" alt="java Ubuntu 16.04"></p><h3 id="安装oracle-Java-JDK"><a href="#安装oracle-Java-JDK" class="headerlink" title="安装oracle Java JDK"></a>安装oracle Java JDK</h3><p>首先，安装依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install python-software-properties</span></span><br></pre></td></tr></table></figure><p>添加仓库源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository ppa:webupd8team/java</span></span><br></pre></td></tr></table></figure><p>更新软件包列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure><p>安装java JDK：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install oracle-java8-installer</span></span><br></pre></td></tr></table></figure><p>安装过程中需要接受协议：</p><p><img src="/images/Screen_Shot_2.png" alt="java Ubuntu 16.04"></p><p>查看java版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure><p><img src="/images/Screen_Shot_3.png" alt="java Ubuntu 16.04"></p><hr><p>如果你同时安装了以上两个版本，你可以自由的在这两个版本之间切换。执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo update-alternatives --config java</span></span><br></pre></td></tr></table></figure><p><img src="/images/Screen_Shot_4.png" alt="java Ubuntu 16.04"></p><p>前面带星号的是当前正在使用的java版本，键入编号选择使用哪个版本。</p><p>编辑/etc/profile，在文件尾添加java环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/profile</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">＃ 如果使用oracle java</span><br><span class="line">export JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle/jre/bin&quot;</span><br><span class="line"></span><br><span class="line"># 如果使用openjdk</span><br><span class="line">export JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64/jre/bin&quot;</span><br></pre></td></tr></table></figure><p>OK，在Ubuntu 16.04上安装java完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java JDK有两个版本，一个开源版本Openjdk，还有一个oracle官方版本jdk。下面记录在Ubuntu 16.04上安装Java JDK的步骤。&lt;/p&gt;
&lt;h3 id=&quot;安装openjdk&quot;&gt;&lt;a href=&quot;#安装openjdk&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="reprint" scheme="http://funchs.com/categories/reprint/"/>
    
    
      <category term="Linux" scheme="http://funchs.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx的5种负载均衡的方式</title>
    <link href="http://funchs.com/2017/01/13/nginx%E7%9A%845%E7%A7%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://funchs.com/2017/01/13/nginx的5种负载均衡的方式/</id>
    <published>2017-01-13T04:00:00.000Z</published>
    <updated>2018-04-11T01:57:01.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx的5种负载均衡的方式"><a href="#nginx的5种负载均衡的方式" class="headerlink" title="nginx的5种负载均衡的方式"></a>nginx的5种负载均衡的方式</h3><h4 id="1-roundrobin"><a href="#1-roundrobin" class="headerlink" title="1.roundrobin"></a>1.roundrobin</h4><p>轮询方式(weight=1),依次将请求分配到各个后台服务器中，默认的负载均衡方式。<br>适用于后台机器性能一致的情况。<br>挂掉的机器可以自动从服务列表中剔除。</p><p>配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">server 192.168.109.5:81;</span><br><span class="line">servse 192.168.109.3:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@xxw conf]# for i in $(seq 10); do curl http://192.168.109.4  ;done</span><br><span class="line">192.168.109.5  It is work!</span><br><span class="line">192.168.109.3 It is work!</span><br><span class="line">192.168.109.5  It is work!</span><br><span class="line">192.168.109.3 It is work!</span><br><span class="line">192.168.109.5  It is work!</span><br><span class="line">192.168.109.3 It is work!</span><br><span class="line">192.168.109.5  It is work!</span><br><span class="line">192.168.109.3 It is work!</span><br><span class="line">192.168.109.5  It is work!</span><br><span class="line">192.168.109.3 It is work!</span><br></pre></td></tr></table></figure><p>测试结果一直是访问这个1次，再访问那个5次，反复循环。</p><h4 id="2-weight"><a href="#2-weight" class="headerlink" title="2.weight"></a>2.weight</h4><p>根据权重来分发请求到不同的机器中，适用于后台机器性能不一样的情况。</p><p>如果后端服务器down掉，能自动剔除。<br>比如下面配置，则1.11服务器的访问量为1.10服务器的两倍。</p><p>配置文件如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream bakend &#123;</span><br><span class="line">server 192.168.1.10 weight=1;</span><br><span class="line">server 192.168.1.11 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-ip-hash"><a href="#3-ip-hash" class="headerlink" title="3.ip_hash"></a>3.ip_hash</h4><p>根据请求者ip的hash值将请求发送到后台服务器中，可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。<br>如果后端服务器down掉，要手工down掉。</p><p>配置文件如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream resinserver&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.1.10:8080;</span><br><span class="line">server 192.168.1.11:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ip_hash是容易理解的，但是因为仅仅能用ip这个因子来分配后端，因此ip_hash是有缺陷的，不能在一些情况下使用：</strong></p><ol><li>nginx不是最前端的服务器。ip_hash要求nginx一定是最前端的服务器，否则nginx得不到正确ip，就不能根据ip作hash。譬如使用的是squid为最前端，那么nginx取ip时只能得到squid的服务器ip地址，用这个地址来作分流是肯定错乱的。</li><li>nginx的后端还有其它方式的负载均衡。假如nginx后端又有其它负载均衡,，将请求又通过另外的方式分流了，那么某个客户端的请求肯定不能定位到同一台session应用服务器上。这么算起来，nginx后端只能直接指向应用服务器，或者再搭一个squid，然后指向应用服务器。最好的办法是用location作一次分流，将需要session的部分请求通过ip_hash分流，剩下的走其它后端去。</li></ol><h4 id="4-url-hash（第三方插件）"><a href="#4-url-hash（第三方插件）" class="headerlink" title="4.url_hash（第三方插件）"></a>4.url_hash（第三方插件）</h4><p>根据请求的url的hash值将请求分到不同的机器中，当后台服务器为缓存的时候效率高。<br>在upstream中加入hash语句，hash_method是使用的hash算法</p><p>配置文件如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream resinserver&#123;</span><br><span class="line">server 192.168.1.10:8080;</span><br><span class="line">server 192.168.1.11:8080;</span><br><span class="line">hash $request_uri;</span><br><span class="line">hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-fair（第三方插件）"><a href="#5-fair（第三方插件）" class="headerlink" title="5.fair（第三方插件）"></a>5.fair（第三方插件）</h4><p>根据后台响应时间来分发请求，响应时间短的分发的请求多。</p><p>配置文件如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream resinserver&#123;</span><br><span class="line">server 192.168.1.10:8080;</span><br><span class="line">server 192.168.1.11:8080;</span><br><span class="line">fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">定义负载均衡设备的Ip及设备状态 </span></span><br><span class="line">upstream bakend&#123; </span><br><span class="line">ip_hash;  </span><br><span class="line">server 127.0.0.1:9090 down;  </span><br><span class="line">server 127.0.0.1:8080 weight=2;  </span><br><span class="line">server 127.0.0.1:6060;  </span><br><span class="line">server 127.0.0.1:7070 backup;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在需要使用负载均衡的server中增加  </span></span><br><span class="line">proxy_pass http://bakend/;</span><br></pre></td></tr></table></figure><h4 id="设备的状态"><a href="#设备的状态" class="headerlink" title="设备的状态"></a>设备的状态</h4><ol><li>down 表示单前的server暂时不参与负载 </li><li>weight 权重,默认为1。 weight越大，负载的权重就越大。 </li><li>max_fails 允许请求失败的次数默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误 </li><li>fail_timeout max_fails次失败后，暂停的时间。 </li><li>backup 备用服务器, 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>nginx支持同时设置多组的负载均衡，用来给不用的server来使用。<br>client_body_in_file_only 设置为On 可以讲client post过来的数据记录到文件中用来做debug<br>client_body_temp_path 设置记录文件的目录 可以设置最多3层目录  </p><p>location 对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">proxy_passhttp://test /;   #将请求传到负载服务器池</span><br><span class="line">&#125;</span><br><span class="line">root 指令：指定目录</span><br><span class="line">proxy_pass  proxy_store  proxy_cache ：实现缓存代理</span><br><span class="line">expires  指定缓存时间</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx的5种负载均衡的方式&quot;&gt;&lt;a href=&quot;#nginx的5种负载均衡的方式&quot; class=&quot;headerlink&quot; title=&quot;nginx的5种负载均衡的方式&quot;&gt;&lt;/a&gt;nginx的5种负载均衡的方式&lt;/h3&gt;&lt;h4 id=&quot;1-roundrobin&quot;
      
    
    </summary>
    
      <category term="reprint" scheme="http://funchs.com/categories/reprint/"/>
    
    
      <category term="工具" scheme="http://funchs.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>centos tar压缩与解压缩命令大全</title>
    <link href="http://funchs.com/2016/11/04/centos%C2%A0tar%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://funchs.com/2016/11/04/centos tar压缩与解压缩命令大全/</id>
    <published>2016-11-04T04:00:00.000Z</published>
    <updated>2018-04-11T01:57:01.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos-tar压缩与解压缩命令大全"><a href="#centos-tar压缩与解压缩命令大全" class="headerlink" title="centos tar压缩与解压缩命令大全"></a>centos tar压缩与解压缩命令大全</h3><p>管理centos服务器的时候常会对文件进行一些常规操作，除了ftp之外了解在ssh下必要的文件操作命令那也是必不可少的，以下摘录一些常用的文件操作命令:</p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作:"></a>文件操作:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls #查看目录中的文件</span><br><span class="line">ls -F #查看目录中的文件</span><br><span class="line">ls -l #显示文件和目录的详细资料</span><br><span class="line">ls -a #显示隐藏文件</span><br><span class="line">ls *[0-9]* #显示包含数字的文件名和目录名</span><br><span class="line">rm go.tar #&amp;nbsp;删除go.tar文件</span><br><span class="line">find mt.cgi #查找文件名为mt.cgi的文件</span><br><span class="line">df ?h #查看磁盘剩余空间</span><br><span class="line">find / -name xxx -print #查找xxx文件</span><br></pre></td></tr></table></figure><h4 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">tar xvf wordpress.tar #解压tar格式的文件</span><br><span class="line">tar -tvf myfile.tar #查看tar文件中包含的文件&amp;nbsp;</span><br><span class="line">tar cf toole.tar tool #把tool目录打包为toole.tar文件</span><br><span class="line">tar cfz xwyme.tar.gz tool #把tool目录打包且压缩为xwyme.tar.gz文件，</span><br><span class="line"><span class="meta">#</span><span class="bash">因为.tar文件几乎是没有压缩过的，MT的.tar.gz文件解压成.tar文件后差不多是10MB&amp;nbsp;</span></span><br><span class="line">tar jcvf /var/bak/www.tar.bz2 /var/www/ #创建.tar.bz2文件，压缩率高</span><br><span class="line">tar xjf www.tar.bz2 #解压tar.bz2格式</span><br><span class="line">gzip -d ge.tar.gz #解压.tar.gz文件为.tar文件</span><br><span class="line">unzip phpbb.zip #解压zip文件，windows下要压缩出一个.tar.gz格式的文件还是有点麻烦的</span><br><span class="line">bunzip2 file1.bz2 #解压一个叫做 ‘file1.bz2′的文件</span><br><span class="line">bzip2 file1 #压缩一个叫做 ‘file1′ 的文件</span><br><span class="line">gunzip file1.gz #解压一个叫做 ‘file1.gz’的文件</span><br><span class="line">gzip file1 #压缩一个叫做 ‘file1′的文件</span><br><span class="line">gzip -9 file1 #最大程度压缩</span><br><span class="line">rar a file1.rar test_file #创建一个叫做 ‘file1.rar’ 的包</span><br><span class="line"><span class="meta">#</span><span class="bash">同时压缩 ‘file1′, ‘file2′ 以及目录 ‘dir1′</span></span><br><span class="line">rar a file1.rar file1 file2 dir1 </span><br><span class="line">rar x file1.rar #解压rar包</span><br><span class="line">unrar x file1.rar #解压rar包</span><br><span class="line">tar -cvf archive.tar file1 #创建一个非压缩的 tarball</span><br><span class="line"><span class="meta">#</span><span class="bash">创建一个包含了 ‘file1′, ‘file2′ 以及 ‘dir1′的档案文件</span></span><br><span class="line">tar -cvf archive.tar file1 file2 dir1 </span><br><span class="line">tar -tf archive.tar #显示一个包中的内容</span><br><span class="line">tar -xvf archive.tar #释放一个包</span><br><span class="line">tar -xvf archive.tar -C /tmp #将压缩包释放到 /tmp目录下</span><br><span class="line">tar -cvfj archive.tar.bz2 dir1 #创建一个bzip2格式的压缩包</span><br><span class="line">tar -xvfj archive.tar.bz2 #解压一个bzip2格式的压缩包</span><br><span class="line">tar -cvfz archive.tar.gz dir1 #创建一个gzip格式的压缩包</span><br><span class="line">tar -xvfz archive.tar.gz #解压一个gzip格式的压缩包</span><br><span class="line">zip file1.zip file1 #创建一个zip格式的压缩包</span><br><span class="line"><span class="meta">#</span><span class="bash">将几个文件和目录同时压缩成一个zip格式的压缩包</span></span><br><span class="line">zip -r file1.zip file1 file2 dir1 </span><br><span class="line">unzip file1.zip #解压一个zip格式压缩包</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;centos-tar压缩与解压缩命令大全&quot;&gt;&lt;a href=&quot;#centos-tar压缩与解压缩命令大全&quot; class=&quot;headerlink&quot; title=&quot;centos tar压缩与解压缩命令大全&quot;&gt;&lt;/a&gt;centos tar压缩与解压缩命令大全&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="original" scheme="http://funchs.com/categories/original/"/>
    
    
      <category term="工具" scheme="http://funchs.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>我常用的工具列表(Windows篇)</title>
    <link href="http://funchs.com/2016/09/08/%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8(Windows%E7%AF%87)/"/>
    <id>http://funchs.com/2016/09/08/我常用的工具列表(Windows篇)/</id>
    <published>2016-09-08T04:00:00.000Z</published>
    <updated>2018-04-11T01:57:01.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>因为开发总会用到各式各样的工具,所以用到的工具会很多.可是每次换电脑的时候总会需要安装新的开发环境,但是每次想着装什么工具的时候,都是绞尽脑汁,结果半天也想不起来,所以这里做个笔记,方便以后安装.<br>本人使用的电脑有装有windows各大品牌的笔电和装(zhuang)有(bi)macos(yong)的MacBook Pro,所以会分开介绍.别的不多说,下面开始Windows篇吧!</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul><li>Eclipse <a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>待续</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>待续</p><h3 id="网站论坛"><a href="#网站论坛" class="headerlink" title="网站论坛"></a>网站论坛</h3><p>待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;因为开发总会用到各式各样的工具,所以用到的工具会很多.可是每次换电脑的时候总会需要安装新的开发环境,但是每次想着装什么工具的时候,都是绞尽脑
      
    
    </summary>
    
      <category term="original" scheme="http://funchs.com/categories/original/"/>
    
    
      <category term="工具" scheme="http://funchs.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Centos上安装Nginx</title>
    <link href="http://funchs.com/2016/08/29/Centos%E4%B8%8A%E5%AE%89%E8%A3%85Nginx/"/>
    <id>http://funchs.com/2016/08/29/Centos上安装Nginx/</id>
    <published>2016-08-29T10:00:00.000Z</published>
    <updated>2018-04-11T01:57:01.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h1><p>Linux系统：<code>Centos 6.5 x64</code><br>Nginx版本：<code>1.7.8</code><br><a id="more"></a></p><h2 id="安装prce和openssl"><a href="#安装prce和openssl" class="headerlink" title="安装prce和openssl"></a>安装prce和openssl</h2><blockquote><p>prce(重定向支持)和openssl(https支持，如果不需要https可以不安装。)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pcre*</span><br><span class="line">yum -y install openssl*</span><br></pre></td></tr></table></figure><p>CentOS 6.5 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可。</p><h2 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.7.8.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装wget</span></span><br><span class="line"><span class="comment"># 下载已编译版本</span></span><br><span class="line">$ yum install wget</span><br></pre></td></tr></table></figure><p>然后进入目录编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.7.8</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx-1.5.1 \</span><br><span class="line">--with-http_ssl_module --with-http_spdy_module \</span><br><span class="line">--with-http_stub_status_module --with-pcre</span><br></pre></td></tr></table></figure><p>如果没有error信息，就可以执行下边的安装了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="开启nginx进程"><a href="#开启nginx进程" class="headerlink" title="开启nginx进程"></a>开启nginx进程</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx-1.7.8/sbin/nginx</span><br></pre></td></tr></table></figure><h1 id="重启或关闭进程："><a href="#重启或关闭进程：" class="headerlink" title="重启或关闭进程："></a>重启或关闭进程：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx-1.7.8/sbin/nginx -s reload</span><br><span class="line">/usr/<span class="built_in">local</span>/nginx-1.7.8/sbin/nginx -s stop</span><br></pre></td></tr></table></figure><h1 id="关闭防火墙，或者添加防火墙规则就可以测试了"><a href="#关闭防火墙，或者添加防火墙规则就可以测试了" class="headerlink" title="关闭防火墙，或者添加防火墙规则就可以测试了"></a>关闭防火墙，或者添加防火墙规则就可以测试了</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p>或者编辑配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加这样一条开放80端口的规则后保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启服务即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nginx-安装&quot;&gt;&lt;a href=&quot;#Nginx-安装&quot; class=&quot;headerlink&quot; title=&quot;Nginx 安装&quot;&gt;&lt;/a&gt;Nginx 安装&lt;/h1&gt;&lt;p&gt;Linux系统：&lt;code&gt;Centos 6.5 x64&lt;/code&gt;&lt;br&gt;Nginx版本：&lt;code&gt;1.7.8&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git-Cheat-Sheet(中文版)</title>
    <link href="http://funchs.com/2016/08/29/Git-Cheat-Sheet(%E4%B8%AD%E6%96%87%E7%89%88)/"/>
    <id>http://funchs.com/2016/08/29/Git-Cheat-Sheet(中文版)/</id>
    <published>2016-08-29T04:00:00.000Z</published>
    <updated>2018-04-11T01:57:01.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Cheat-Sheet-中文版"><a href="#Git-Cheat-Sheet-中文版" class="headerlink" title="Git Cheat Sheet 中文版"></a>Git Cheat Sheet 中文版</h1><blockquote><p>原文 <a href="https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/README.md" target="_blank" rel="noopener">Git Cheat Sheet 中文版</a></p></blockquote><a id="more"></a><hr><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><a href="#配置">配置</a></li><li><a href="#配置文件">配置文件</a></li><li><a href="#创建">创建</a></li><li><a href="#本地修改">本地修改</a></li><li><a href="#搜索">搜索</a></li><li><a href="#提交历史">提交历史</a></li><li><a href="#分支与标签">分支与标签</a></li><li><a href="#更新与发布">更新与发布</a></li><li><a href="#合并与重置">合并与重置</a></li><li><a href="#撤销">撤销</a></li><li><a href="#git-flow">Git Flow</a></li></ul><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h5 id="列出当前配置："><a href="#列出当前配置：" class="headerlink" title="列出当前配置："></a>列出当前配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h5 id="列出repository配置："><a href="#列出repository配置：" class="headerlink" title="列出repository配置："></a>列出repository配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --local --list</span><br></pre></td></tr></table></figure><h5 id="列出全局配置："><a href="#列出全局配置：" class="headerlink" title="列出全局配置："></a>列出全局配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br></pre></td></tr></table></figure><h5 id="列出系统配置："><a href="#列出系统配置：" class="headerlink" title="列出系统配置："></a>列出系统配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --system --list</span><br></pre></td></tr></table></figure><h5 id="设置用户名："><a href="#设置用户名：" class="headerlink" title="设置用户名："></a>设置用户名：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “[firstname lastname]”</span><br></pre></td></tr></table></figure><h5 id="设置用户邮箱："><a href="#设置用户邮箱：" class="headerlink" title="设置用户邮箱："></a>设置用户邮箱：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email “[valid-email]”</span><br></pre></td></tr></table></figure><h5 id="设置git命令输出为彩色："><a href="#设置git命令输出为彩色：" class="headerlink" title="设置git命令输出为彩色："></a>设置git命令输出为彩色：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure><h5 id="设置git使用的文本编辑器设："><a href="#设置git使用的文本编辑器设：" class="headerlink" title="设置git使用的文本编辑器设："></a>设置git使用的文本编辑器设：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor vi</span><br></pre></td></tr></table></figure><hr><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h5 id="Repository配置对应的配置文件路径-–local-："><a href="#Repository配置对应的配置文件路径-–local-：" class="headerlink" title="Repository配置对应的配置文件路径[–local]："></a>Repository配置对应的配置文件路径[–local]：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;repo&gt;/.git/config</span><br></pre></td></tr></table></figure><h5 id="用户全局配置对应的配置文件路径-–global-："><a href="#用户全局配置对应的配置文件路径-–global-：" class="headerlink" title="用户全局配置对应的配置文件路径[–global]："></a>用户全局配置对应的配置文件路径[–global]：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure><h5 id="系统配置对应的配置文件路径-–local-："><a href="#系统配置对应的配置文件路径-–local-：" class="headerlink" title="系统配置对应的配置文件路径[–local]："></a>系统配置对应的配置文件路径[–local]：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/gitconfig</span><br></pre></td></tr></table></figure><hr><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h5 id="复制一个已创建的仓库"><a href="#复制一个已创建的仓库" class="headerlink" title="复制一个已创建的仓库:"></a>复制一个已创建的仓库:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 SSH</span></span><br><span class="line">$ git <span class="built_in">clone</span> ssh://user@domain.com/repo.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过 HTTP</span></span><br><span class="line">$ git <span class="built_in">clone</span> http://domain.com/user/repo.git</span><br></pre></td></tr></table></figure><h5 id="创建一个新的本地仓库"><a href="#创建一个新的本地仓库" class="headerlink" title="创建一个新的本地仓库:"></a>创建一个新的本地仓库:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><hr><h3 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h3><h5 id="显示工作路径下已修改的文件："><a href="#显示工作路径下已修改的文件：" class="headerlink" title="显示工作路径下已修改的文件："></a>显示工作路径下已修改的文件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h5 id="显示与上次提交版本文件的不同："><a href="#显示与上次提交版本文件的不同：" class="headerlink" title="显示与上次提交版本文件的不同："></a>显示与上次提交版本文件的不同：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h5 id="把当前所有修改添加到下次提交中："><a href="#把当前所有修改添加到下次提交中：" class="headerlink" title="把当前所有修改添加到下次提交中："></a>把当前所有修改添加到下次提交中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h5 id="把对某个文件的修改添加到下次提交中："><a href="#把对某个文件的修改添加到下次提交中：" class="headerlink" title="把对某个文件的修改添加到下次提交中："></a>把对某个文件的修改添加到下次提交中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -p &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="提交本地的所有修改："><a href="#提交本地的所有修改：" class="headerlink" title="提交本地的所有修改："></a>提交本地的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure><h5 id="提交之前已标记的变化："><a href="#提交之前已标记的变化：" class="headerlink" title="提交之前已标记的变化："></a>提交之前已标记的变化：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><h5 id="附加消息提交："><a href="#附加消息提交：" class="headerlink" title="附加消息提交："></a>附加消息提交：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;message here&apos;</span><br></pre></td></tr></table></figure><h5 id="提交，并将提交时间设置为之前的某个日期"><a href="#提交，并将提交时间设置为之前的某个日期" class="headerlink" title="提交，并将提交时间设置为之前的某个日期:"></a>提交，并将提交时间设置为之前的某个日期:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --date=&quot;`date --date=&apos;n day ago&apos;`&quot; -am &quot;Commit Message&quot;</span><br></pre></td></tr></table></figure><h5 id="修改上次提交"><a href="#修改上次提交" class="headerlink" title="修改上次提交"></a>修改上次提交</h5><p><em><sub>请勿修改已发布的提交记录!</sub></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure></p><h5 id="修改上次提交的committer-date："><a href="#修改上次提交的committer-date：" class="headerlink" title="修改上次提交的committer date："></a>修改上次提交的committer date：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=&quot;date&quot; git commit --amend</span><br></pre></td></tr></table></figure><h5 id="修改上次提交的author-date："><a href="#修改上次提交的author-date：" class="headerlink" title="修改上次提交的author date："></a>修改上次提交的author date：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --date=&quot;date&quot;</span><br></pre></td></tr></table></figure><h5 id="把当前分支中未提交的修改移动到其他分支："><a href="#把当前分支中未提交的修改移动到其他分支：" class="headerlink" title="把当前分支中未提交的修改移动到其他分支："></a>把当前分支中未提交的修改移动到其他分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout branch2</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h5 id="将-stashed-changes-应用到当前分支："><a href="#将-stashed-changes-应用到当前分支：" class="headerlink" title="将 stashed changes 应用到当前分支："></a>将 stashed changes 应用到当前分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure><h5 id="删除最新一次的-stashed-changes："><a href="#删除最新一次的-stashed-changes：" class="headerlink" title="删除最新一次的 stashed changes："></a>删除最新一次的 stashed changes：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure><hr><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h5 id="从当前目录的所有文件中查找文本内容："><a href="#从当前目录的所有文件中查找文本内容：" class="headerlink" title="从当前目录的所有文件中查找文本内容："></a>从当前目录的所有文件中查找文本内容：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git grep &quot;Hello&quot;</span><br></pre></td></tr></table></figure><h5 id="在某一版本中搜索文本："><a href="#在某一版本中搜索文本：" class="headerlink" title="在某一版本中搜索文本："></a>在某一版本中搜索文本：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git grep &quot;Hello&quot; v2.5</span><br></pre></td></tr></table></figure><hr><h3 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h3><h5 id="从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）："><a href="#从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）：" class="headerlink" title="从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）："></a>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><h5 id="显示所有提交（仅显示提交的hash和message）："><a href="#显示所有提交（仅显示提交的hash和message）：" class="headerlink" title="显示所有提交（仅显示提交的hash和message）："></a>显示所有提交（仅显示提交的hash和message）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br></pre></td></tr></table></figure><h5 id="显示某个用户的所有提交："><a href="#显示某个用户的所有提交：" class="headerlink" title="显示某个用户的所有提交："></a>显示某个用户的所有提交：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author=&quot;username&quot;</span><br></pre></td></tr></table></figure><h5 id="显示某个文件的所有修改："><a href="#显示某个文件的所有修改：" class="headerlink" title="显示某个文件的所有修改："></a>显示某个文件的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集："><a href="#仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集：" class="headerlink" title="仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集："></a>仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline &lt;origin/master&gt;..&lt;remote/master&gt; --left-right</span><br></pre></td></tr></table></figure><h5 id="谁，在什么时间，修改了文件的什么内容："><a href="#谁，在什么时间，修改了文件的什么内容：" class="headerlink" title="谁，在什么时间，修改了文件的什么内容："></a>谁，在什么时间，修改了文件的什么内容：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="显示reflog："><a href="#显示reflog：" class="headerlink" title="显示reflog："></a>显示reflog：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog show</span><br></pre></td></tr></table></figure><h5 id="删除reflog："><a href="#删除reflog：" class="headerlink" title="删除reflog："></a>删除reflog：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog delete</span><br></pre></td></tr></table></figure><hr><h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><h5 id="列出所有的分支："><a href="#列出所有的分支：" class="headerlink" title="列出所有的分支："></a>列出所有的分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h5 id="列出所有的远端分支："><a href="#列出所有的远端分支：" class="headerlink" title="列出所有的远端分支："></a>列出所有的远端分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h5 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支:"></a>创建并切换到新分支:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="基于当前分支创建新分支："><a href="#基于当前分支创建新分支：" class="headerlink" title="基于当前分支创建新分支："></a>基于当前分支创建新分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure><h5 id="基于远程分支创建新的可追溯的分支："><a href="#基于远程分支创建新的可追溯的分支：" class="headerlink" title="基于远程分支创建新的可追溯的分支："></a>基于远程分支创建新的可追溯的分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;</span><br></pre></td></tr></table></figure><h5 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支:"></a>删除本地分支:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="强制删除一个本地分支："><a href="#强制删除一个本地分支：" class="headerlink" title="强制删除一个本地分支："></a>强制删除一个本地分支：<br></h5><p><em><sub>将会丢失未合并的修改！</sub></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="给当前版本打标签："><a href="#给当前版本打标签：" class="headerlink" title="给当前版本打标签："></a>给当前版本打标签：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h5 id="给当前版本打标签并附加消息："><a href="#给当前版本打标签并附加消息：" class="headerlink" title="给当前版本打标签并附加消息："></a>给当前版本打标签并附加消息：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="更新与发布"><a href="#更新与发布" class="headerlink" title="更新与发布"></a>更新与发布</h3><h5 id="列出当前配置的远程端："><a href="#列出当前配置的远程端：" class="headerlink" title="列出当前配置的远程端："></a>列出当前配置的远程端：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h5 id="显示远程端的信息："><a href="#显示远程端的信息：" class="headerlink" title="显示远程端的信息："></a>显示远程端的信息：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure><h5 id="添加新的远程端："><a href="#添加新的远程端：" class="headerlink" title="添加新的远程端："></a>添加新的远程端：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h5 id="下载远程端版本，但不合并到HEAD中："><a href="#下载远程端版本，但不合并到HEAD中：" class="headerlink" title="下载远程端版本，但不合并到HEAD中："></a>下载远程端版本，但不合并到HEAD中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure><h5 id="下载远程端版本，并自动与HEAD版本合并："><a href="#下载远程端版本，并自动与HEAD版本合并：" class="headerlink" title="下载远程端版本，并自动与HEAD版本合并："></a>下载远程端版本，并自动与HEAD版本合并：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote pull &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h5 id="将远程端版本合并到本地版本中："><a href="#将远程端版本合并到本地版本中：" class="headerlink" title="将远程端版本合并到本地版本中："></a>将远程端版本合并到本地版本中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><h5 id="以rebase方式将远端分支与本地合并："><a href="#以rebase方式将远端分支与本地合并：" class="headerlink" title="以rebase方式将远端分支与本地合并："></a>以rebase方式将远端分支与本地合并：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="将本地版本发布到远程端："><a href="#将本地版本发布到远程端：" class="headerlink" title="将本地版本发布到远程端："></a>将本地版本发布到远程端：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push remote &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="删除远程端分支："><a href="#删除远程端分支：" class="headerlink" title="删除远程端分支："></a>删除远程端分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</span><br><span class="line">or</span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</span><br></pre></td></tr></table></figure><h5 id="发布标签"><a href="#发布标签" class="headerlink" title="发布标签:"></a>发布标签:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure><hr><h3 id="合并与重置-Rebase"><a href="#合并与重置-Rebase" class="headerlink" title="合并与重置(Rebase)"></a>合并与重置(Rebase)</h3><h5 id="将分支合并到当前HEAD中："><a href="#将分支合并到当前HEAD中：" class="headerlink" title="将分支合并到当前HEAD中："></a>将分支合并到当前HEAD中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="将当前HEAD版本重置到分支中"><a href="#将当前HEAD版本重置到分支中" class="headerlink" title="将当前HEAD版本重置到分支中:"></a>将当前HEAD版本重置到分支中:</h5><p><em><sub>请勿重置已发布的提交!</sub></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure></p><h5 id="退出重置"><a href="#退出重置" class="headerlink" title="退出重置:"></a>退出重置:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --abort</span><br></pre></td></tr></table></figure><h5 id="解决冲突后继续重置："><a href="#解决冲突后继续重置：" class="headerlink" title="解决冲突后继续重置："></a>解决冲突后继续重置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><h5 id="使用配置好的merge-tool-解决冲突："><a href="#使用配置好的merge-tool-解决冲突：" class="headerlink" title="使用配置好的merge tool 解决冲突："></a>使用配置好的merge tool 解决冲突：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mergetool</span><br></pre></td></tr></table></figure><h5 id="在编辑器中手动解决冲突后，标记文件为已解决冲突："><a href="#在编辑器中手动解决冲突后，标记文件为已解决冲突：" class="headerlink" title="在编辑器中手动解决冲突后，标记文件为已解决冲突："></a>在编辑器中手动解决冲突后，标记文件为<code>已解决冲突</code>：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><h5 id="合并提交："><a href="#合并提交：" class="headerlink" title="合并提交："></a>合并提交：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i &lt;commit-just-before-first&gt;</span><br></pre></td></tr></table></figure><p>把上面的内容替换为下面的内容：</p><p>原内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line">pick &lt;commit_id2&gt;</span><br><span class="line">pick &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure></p><p>替换为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line">squash &lt;commit_id2&gt;</span><br><span class="line">squash &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure></p><hr><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><h5 id="放弃工作目录下的所有修改："><a href="#放弃工作目录下的所有修改：" class="headerlink" title="放弃工作目录下的所有修改："></a>放弃工作目录下的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD</span><br></pre></td></tr></table></figure><h5 id="移除缓存区的所有文件（i-e-撤销上次git-add）"><a href="#移除缓存区的所有文件（i-e-撤销上次git-add）" class="headerlink" title="移除缓存区的所有文件（i.e. 撤销上次git add）:"></a>移除缓存区的所有文件（i.e. 撤销上次<code>git add</code>）:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD</span><br></pre></td></tr></table></figure><h5 id="放弃某个文件的所有本地修改："><a href="#放弃某个文件的所有本地修改：" class="headerlink" title="放弃某个文件的所有本地修改："></a>放弃某个文件的所有本地修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="重置一个提交（通过创建一个截然不同的新提交）"><a href="#重置一个提交（通过创建一个截然不同的新提交）" class="headerlink" title="重置一个提交（通过创建一个截然不同的新提交）"></a>重置一个提交（通过创建一个截然不同的新提交）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："><a href="#将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：" class="headerlink" title="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："></a>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="用远端分支强制覆盖本地分支："><a href="#用远端分支强制覆盖本地分支：" class="headerlink" title="用远端分支强制覆盖本地分支："></a>用远端分支强制覆盖本地分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;remote/branch&gt; e.g., upstream/master, origin/my-feature</span><br></pre></td></tr></table></figure><h5 id="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："><a href="#将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："></a>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："><a href="#将HEAD重置到上一次提交的版本，并保留未提交的本地修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："></a>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="删除添加-gitignore文件前错误提交的文件："><a href="#删除添加-gitignore文件前错误提交的文件：" class="headerlink" title="删除添加.gitignore文件前错误提交的文件："></a>删除添加<code>.gitignore</code>文件前错误提交的文件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached .</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;remove xyz file&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git-Flow"></a>Git-Flow</h2><p>###索引</p><ul><li><a href="#安装">安装</a></li><li><a href="#开始">开始</a></li><li><a href="#特性">特性</a></li><li><a href="#做一个release版本">做一个release版本</a></li><li><a href="#紧急修复">紧急修复</a></li><li><a href="#commands">Commands</a></li></ul><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>你需要有一个可以工作的 git 作为前提。</li><li>Git flow 可以工作在 OSX, Linux 和 Windows之下</li></ul><h5 id="OSX-Homebrew"><a href="#OSX-Homebrew" class="headerlink" title="OSX Homebrew:"></a>OSX Homebrew:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git-flow</span><br></pre></td></tr></table></figure><h5 id="OSX-Macports"><a href="#OSX-Macports" class="headerlink" title="OSX Macports:"></a>OSX Macports:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ port install git-flow</span><br></pre></td></tr></table></figure><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install git-flow</span><br></pre></td></tr></table></figure><h5 id="Windows-Cygwin"><a href="#Windows-Cygwin" class="headerlink" title="Windows (Cygwin):"></a>Windows (Cygwin):</h5><p>安装 git-flow, 你需要 wget 和 util-linux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul><li>为了自定义你的项目，Git flow 需要初始化过程。</li><li>使用 git-flow，从初始化一个现有的 git 库内开始。</li><li>初始化，你必须回答几个关于分支的命名约定的问题。建议使用默认值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure><hr><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>为即将发布的版本开发新功能特性。</li><li>这通常只存在开发者的库中。</li></ul><h5 id="创建一个新特性"><a href="#创建一个新特性" class="headerlink" title="创建一个新特性:"></a>创建一个新特性:</h5><p>下面操作创建了一个新的feature分支，并切换到该分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature start MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="完成新特性的开发"><a href="#完成新特性的开发" class="headerlink" title="完成新特性的开发:"></a>完成新特性的开发:</h5><p>完成开发新特性。这个动作执行下面的操作：</p><ol><li>合并 MYFEATURE 分支到 ‘develop’</li><li>删除这个新特性分支</li><li>切换回 ‘develop’ 分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature finish MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="发布新特性"><a href="#发布新特性" class="headerlink" title="发布新特性:"></a>发布新特性:</h5><p>你是否合作开发一项新特性？<br>发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature publish MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="取得一个发布的新特性分支"><a href="#取得一个发布的新特性分支" class="headerlink" title="取得一个发布的新特性分支:"></a>取得一个发布的新特性分支:</h5><p>取得其它用户发布的新特性分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature pull origin MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="追溯远端上的特性"><a href="#追溯远端上的特性" class="headerlink" title="追溯远端上的特性:"></a>追溯远端上的特性:</h5><p>通过下面命令追溯远端上的特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature track MYFEATURE</span><br></pre></td></tr></table></figure><hr><h3 id="做一个release版本"><a href="#做一个release版本" class="headerlink" title="做一个release版本"></a>做一个release版本</h3><ul><li>支持一个新的用于生产环境的发布版本。</li><li>允许修正小问题，并为发布版本准备元数据。</li></ul><h5 id="开始创建release版本"><a href="#开始创建release版本" class="headerlink" title="开始创建release版本:"></a>开始创建release版本:</h5><ul><li>开始创建release版本，使用 git flow release 命令。 </li><li>‘release’ 分支的创建基于 ‘develop’ 分支。 </li><li>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支。</li><li>这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release start RELEASE [BASE]</span><br></pre></td></tr></table></figure><p>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release publish RELEASE</span><br></pre></td></tr></table></figure><p>(你可以通过<br><code>git flow release track RELEASE</code> 命令追溯远端的 release 版本)</p><h5 id="完成-release-版本"><a href="#完成-release-版本" class="headerlink" title="完成 release 版本:"></a>完成 release 版本:</h5><p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：</p><ol><li>归并 release 分支到 ‘master’ 分支。</li><li>用 release 分支名打 Tag</li><li>归并 release 分支到 ‘develop’</li><li>移除 release 分支。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish RELEASE</span><br></pre></td></tr></table></figure><p>不要忘记使用<code>git push --tags</code>将tags推送到远端</p><hr><h3 id="紧急修复"><a href="#紧急修复" class="headerlink" title="紧急修复"></a>紧急修复</h3><p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p><h5 id="开始-git-flow-紧急修复"><a href="#开始-git-flow-紧急修复" class="headerlink" title="开始 git flow 紧急修复:"></a>开始 git flow 紧急修复:</h5><p>像其它 git flow 命令一样, 紧急修复分支开始自：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix start VERSION [BASENAME]</span><br></pre></td></tr></table></figure><p>VERSION 参数标记着修正版本。你可以从 <code>[BASENAME]开始，</code>[BASENAME]`为finish release时填写的版本号</p><h5 id="完成紧急修复"><a href="#完成紧急修复" class="headerlink" title="完成紧急修复:"></a>完成紧急修复:</h5><p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow hotfix finish VERSION</span><br></pre></td></tr></table></figure><hr><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p><img src="https://github.com/flyhigher139/Git-Cheat-Sheet/raw/master/Img/git-flow-commands.png" alt=""></p><h3 id="Git-flow-schema"><a href="#Git-flow-schema" class="headerlink" title="Git flow schema"></a>Git flow schema</h3><p><img src="https://github.com/flyhigher139/Git-Cheat-Sheet/raw/master/Img/git-flow-commands-without-flow.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-Cheat-Sheet-中文版&quot;&gt;&lt;a href=&quot;#Git-Cheat-Sheet-中文版&quot; class=&quot;headerlink&quot; title=&quot;Git Cheat Sheet 中文版&quot;&gt;&lt;/a&gt;Git Cheat Sheet 中文版&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;原文 &lt;a href=&quot;https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Cheat Sheet 中文版&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>教你使用Travis CI自动化部署Hexo</title>
    <link href="http://funchs.com/2016/08/28/%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo/"/>
    <id>http://funchs.com/2016/08/28/教你使用Travis CI自动化部署Hexo/</id>
    <published>2016-08-28T08:29:48.000Z</published>
    <updated>2018-04-11T01:57:01.602Z</updated>
    
    <content type="html"><![CDATA[<p>原文参考:<a href="http://blog.csdn.net/woblog/article/details/51319364" target="_blank" rel="noopener">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a>,<a href="https://segmentfault.com/a/1190000004714256#articleHeader3" target="_blank" rel="noopener">Travis CI自动化部署Hexo</a></p><p>这里记下,做个收藏,有版权问题.请及时联系.</p><a id="more"></a><h3 id="什么是Travis-CI"><a href="#什么是Travis-CI" class="headerlink" title="什么是Travis CI"></a>什么是Travis CI</h3><p>Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，如果你的项目还没有加入Travis CI构建队列，那么我真的想对你说out了。</p><h3 id="开通Travis-CI"><a href="#开通Travis-CI" class="headerlink" title="开通Travis CI"></a>开通Travis CI</h3><p>利用 GitHub账号登录<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a></p><h3 id="项目开启Travis-CI"><a href="#项目开启Travis-CI" class="headerlink" title="项目开启Travis CI"></a>项目开启Travis CI</h3><p>这里引用了<a href="https://segmentfault.com/a/1190000004714256#articleHeader3" target="_blank" rel="noopener">Travis CI自动化部署Hexo</a>的图片<br><img src="https://segmentfault.com/img/bVtWyl" alt="项目开启Travis CI"></p><p>在项目的设置中开启Build only if .travis.yml is present这一项.<br><img src="https://segmentfault.com/img/bVtWyq" alt=""></p><h3 id="Github中生成Access-Token"><a href="#Github中生成Access-Token" class="headerlink" title="Github中生成Access Token"></a>Github中生成Access Token</h3><blockquote><p>这个用于操作repo,否则没有权限.</p></blockquote><p><img src="https://segmentfault.com/img/bVtWys" alt=""><br><img src="https://segmentfault.com/img/bVtWyv" alt=""></p><h3 id="安装Travis"><a href="#安装Travis" class="headerlink" title="安装Travis"></a>安装Travis</h3><blockquote><p>注意:需要安装Ruby,并且需要安装rubygems插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem isntall travis</span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在项目根目录创建.travis.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .travis.yml</span><br></pre></td></tr></table></figure><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master #源码分支名称</span><br><span class="line">before_install:</span><br><span class="line">- npm install -g hexo</span><br><span class="line">- npm install -g hexo-cli</span><br><span class="line">before_script:</span><br><span class="line">- git config --global user.name 'yourname'</span><br><span class="line">- git config --global user.email 'youremail'</span><br><span class="line">- sed -i'' "s~git@github.com:&lt;yourname&gt;/&lt;projectname&gt;.git~https://$&#123;REPO_TOKEN&#125;:x-oauth-basic@github.com/&lt;yourname&gt;/&lt;projectname&gt;.git~" _config.yml</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo generate</span><br><span class="line">after_success:</span><br><span class="line">- hexo deploy</span><br></pre></td></tr></table></figure><h3 id="配置Travis"><a href="#配置Travis" class="headerlink" title="配置Travis"></a>配置Travis</h3><p>1.登录travis<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login --auto</span><br></pre></td></tr></table></figure></p><p>2.添加变量信息<br>在项目根目录下执行:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt 'REPO_TOKEN=&lt;TOKEN&gt;' --add</span><br></pre></td></tr></table></figure></p><p>之后会在.travis.yml文件中添加下面的信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    secure: fxBE17yzFhC2+FjwVLYbgIhggyfliv3dFCDozTJD7U3n...</span><br></pre></td></tr></table></figure></p><blockquote><p>这里的REPO_TOKEN是变量名,在后面的配置文件中会用到.TOKEN是上面github生成的Token.</p></blockquote><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>Push本地的代码至远程仓库，然后,在<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a>看项目自动化执行.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文参考:&lt;a href=&quot;http://blog.csdn.net/woblog/article/details/51319364&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;手把手教你使用Travis CI自动部署你的Hexo博客到Github上&lt;/a&gt;,&lt;a href=&quot;https://segmentfault.com/a/1190000004714256#articleHeader3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI自动化部署Hexo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里记下,做个收藏,有版权问题.请及时联系.&lt;/p&gt;
    
    </summary>
    
      <category term="collect" scheme="http://funchs.com/categories/collect/"/>
    
    
      <category term="travis ci" scheme="http://funchs.com/tags/travis-ci/"/>
    
      <category term="hexo" scheme="http://funchs.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://funchs.com/2016/07/01/hello-world/"/>
    <id>http://funchs.com/2016/07/01/hello-world/</id>
    <published>2016-07-01T08:29:48.000Z</published>
    <updated>2018-04-11T01:57:01.592Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
